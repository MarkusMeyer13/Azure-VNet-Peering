{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "publisherEmail": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "meyer_markus@gmx.de",
      "metadata": {
        "description": "The email address of the owner of the service"
      }
    },
    "publisherName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "MetalMeyer",
      "metadata": {
        "description": "The name of the owner of the service"
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": ["Developer", "Premium"],
      "defaultValue": "Developer",
      "metadata": {
        "description": "The pricing tier of this API Management service"
      }
    },
    "skuCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The instance size of this API Management service."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources except Application Insights."
      }
    },
    "appInsightsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for Application Insights."
      }
    },
    "functionRuntime": {
      "type": "string",
      "defaultValue": "dotnet",
      "allowedValues": ["node", "dotnet", "java"],
      "metadata": {
        "description": "The language worker runtime to load in the function app."
      }
    },
    "functionCloudAppName": {
      "type": "string",
      "defaultValue": "[concat('func-', 'cloud', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "functionOnPremiseAppName": {
      "type": "string",
      "defaultValue": "[concat('func-', 'on-premise', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": ["Standard_LRS", "Standard_GRS", "Standard_RAGRS"],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "vNetCloud": {
      "type": "string",
      "defaultValue": "vnet-cloud",
      "metadata": {
        "description": "Cloud"
      }
    },
    "vNetCloudAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.0.0/16",
      "metadata": {
        "description": "Cloud prefix"
      }
    },
    "subnetvNetCloudResourcesAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.32.0/19",
      "metadata": {
        "description": "Cloud Resoures Prefix"
      }
    },
    "subnetvNetCloudResources": {
      "type": "string",
      "defaultValue": "snet-vnet-cloud-resources",
      "metadata": {
        "description": "Cloud Resoures Subnet"
      }
    },
    "subnetvNetCloudAPIMAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.252.0/22",
      "metadata": {
        "description": "Cloud APIM Prefix"
      }
    },
    "subnetvNetCloudAPIM": {
      "type": "string",
      "defaultValue": "snet-vnet-cloud-apim",
      "metadata": {
        "description": "Cloud APIM Subnet"
      }
    },
    "subnetvNetCloudBackendsAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.64.0/19",
      "metadata": {
        "description": "Cloud Backends Prefix"
      }
    },
    "subnetvNetCloudBackends": {
      "type": "string",
      "defaultValue": "snet-vnet-cloud-backends",
      "metadata": {
        "description": "Cloud Backends Subnet"
      }
    },
    "vNetOnPremise": {
      "type": "string",
      "defaultValue": "vnet-on-premise",
      "metadata": {
        "description": "On Premise"
      }
    },
    "vNetOnPremiseAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/8",
      "metadata": {
        "description": "On PremiseAddress prefix"
      }
    },
    "subnetvNetOnPremiseAddressPrefix": {
      "type": "string",
      "defaultValue": "10.128.0.0/9",
      "metadata": {
        "description": "On PremiseAddress Prefix"
      }
    },
    "subnetvNetOnPremise": {
      "type": "string",
      "defaultValue": "snet-vnet-on-premise",
      "metadata": {
        "description": "On PremiseAddress Subnet"
      }
    },
    "subnetvNetOnPremiseBackendsAddressPrefix": {
      "type": "string",
      "defaultValue": "10.96.0.0/11",
      "metadata": {
        "description": "On PremiseAddress Backends Prefix"
      }
    },
    "subnetvNetOnPremiseBackends": {
      "type": "string",
      "defaultValue": "snet-vnet-on-premise-backends",
      "metadata": {
        "description": "On PremiseAddress Backends Subnet"
      }
    }
  },
  "variables": {
    "vNetOnPremisetovNetCloudPeeringName": "[concat(parameters('vNetOnPremise'), '-', parameters('vNetCloud'))]",
    "vNetCloudtovNetOnPremisePeeringName": "[concat(parameters('vNetCloud'), '-', parameters('vNetOnPremise'))]",
    "hostingPlanCloudName": "[concat('plan-', 'cloud-functions', uniqueString(resourceGroup().id))]",
    "hostingPlanOnPremiseName": "[concat('plan-', 'on-premise-functions', uniqueString(resourceGroup().id))]",
    "applicationInsightsName": "[concat('appi-eval-peering', uniqueString(resourceGroup().id))]",
    "apiManagementServiceName": "[concat('apim-eval-peering', uniqueString(resourceGroup().id))]",
    "storageAccountOnPremiseName": "[concat('strpremise', uniqueString(resourceGroup().id))]",
    "storageAccountCloudName": "[concat('strcloud', uniqueString(resourceGroup().id))]",
    "functionWorkerRuntime": "[parameters('functionRuntime')]",
    "appInsightsResourceId": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
    "apiManagementNsgName": "[concat('nsg-', 'apim')]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('apiManagementNsgName')]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "Client_communication_to_API_Management",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Secure_Client_communication_to_API_Management",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "Management_endpoint_for_Azure_portal_and_Powershell",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3443",
              "sourceAddressPrefix": "ApiManagement",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "Dependency_on_Redis_Cache",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "6381-6383",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "Dependency_to_sync_Rate_Limit_Inbound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "4290",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 135,
              "direction": "Inbound"
            }
          },
          {
            "name": "Dependency_on_Azure_SQL",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "1433",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Sql",
              "access": "Allow",
              "priority": 140,
              "direction": "Outbound"
            }
          },
          {
            "name": "Dependency_for_Log_to_event_Hub_policy",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "5671",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "EventHub",
              "access": "Allow",
              "priority": 150,
              "direction": "Outbound"
            }
          },
          {
            "name": "Dependency_on_Redis_Cache_outbound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "6381-6383",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 160,
              "direction": "Outbound"
            }
          },
          {
            "name": "Depenedency_To_sync_RateLimit_Outbound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "4290",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 165,
              "direction": "Outbound"
            }
          },
          {
            "name": "Dependency_on_Azure_File_Share_for_GIT",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "445",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 170,
              "direction": "Outbound"
            }
          },
          {
            "name": "Azure_Infrastructure_Load_Balancer",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 180,
              "direction": "Inbound"
            }
          },
          {
            "name": "Publish_DiagnosticLogs_And_Metrics",
            "properties": {
              "description": "APIM Logs and Metrics for consumption by admins and your IT team are all part of the management plane",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureMonitor",
              "access": "Allow",
              "priority": 185,
              "direction": "Outbound",
              "destinationPortRanges": ["443", "12000", "1886"]
            }
          },
          {
            "name": "Connect_To_SMTP_Relay_For_SendingEmails",
            "properties": {
              "description": "APIM features the ability to generate email traffic as part of the data plane and the management plane",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 190,
              "direction": "Outbound",
              "destinationPortRanges": ["25", "587", "25028"]
            }
          },
          {
            "name": "Authenticate_To_Azure_Active_Directory",
            "properties": {
              "description": "Connect to Azure Active Directory for Developer Portal Authentication or for Oauth2 flow during any Proxy Authentication",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureActiveDirectory",
              "access": "Allow",
              "priority": 200,
              "direction": "Outbound",
              "destinationPortRanges": ["80", "443"]
            }
          },
          {
            "name": "Dependency_on_Azure_Storage",
            "properties": {
              "description": "APIM service dependency on Azure Blob and Azure Table Storage",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "Publish_Monitoring_Logs",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 300,
              "direction": "Outbound"
            }
          },
          {
            "name": "Access_KeyVault",
            "properties": {
              "description": "Allow APIM service control plane access to KeyVault to refresh secrets",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureKeyVault",
              "access": "Allow",
              "priority": 350,
              "direction": "Outbound",
              "destinationPortRanges": ["443"]
            }
          },
          {
            "name": "Deny_All_Internet_Outbound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Internet",
              "access": "Deny",
              "priority": 999,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "location": "[parameters('location')]",
      "name": "[parameters('vNetOnPremise')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[parameters('vNetOnPremiseAddressPrefix')]"]
        },
        "subnets": [
          {
            "name": "[parameters('subnetvNetOnPremise')]",
            "properties": {
              "addressPrefix": "[parameters('subnetvNetOnPremiseAddressPrefix')]",
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ],
              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureActiveDirectory",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.EventHub",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.KeyVault",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ServiceBus",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": ["westeurope", "northeurope"]
                },
                {
                  "service": "Microsoft.Web",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ContainerRegistry",
                  "locations": ["*"]
                }
              ]
            }
          },
          {
            "name": "[parameters('subnetvNetOnPremiseBackends')]",
            "properties": {
              "addressPrefix": "[parameters('subnetvNetOnPremiseBackendsAddressPrefix')]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureActiveDirectory",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.EventHub",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.KeyVault",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ServiceBus",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": ["westeurope", "northeurope"]
                },
                {
                  "service": "Microsoft.Web",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ContainerRegistry",
                  "locations": ["*"]
                }
              ]
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2020-05-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('vNetOnPremisetovNetCloudPeeringName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vNetOnPremise'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vNetCloud'))]"
          ],
          "comments": "This is the peering from vNet 2 to vNet 1",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": false,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vNetCloud'))]"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "location": "[parameters('location')]",
      "name": "[parameters('vNetCloud')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('apiManagementNsgName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[parameters('vNetCloudAddressPrefix')]"]
        },
        "subnets": [
          {
            "name": "[parameters('subnetvNetCloudBackends')]",
            "properties": {
              "addressPrefix": "[parameters('subnetvNetCloudBackendsAddressPrefix')]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureActiveDirectory",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.EventHub",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.KeyVault",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ServiceBus",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": ["westeurope", "northeurope"]
                },
                {
                  "service": "Microsoft.Web",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ContainerRegistry",
                  "locations": ["*"]
                }
              ]
            }
          },
          {
            "name": "[parameters('subnetvNetCloudAPIM')]",
            "properties": {
              "addressPrefix": "[parameters('subnetvNetCloudAPIMAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('apiManagementNsgName'))]"
              },
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.ApiManagement/service",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ],

              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureActiveDirectory",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.EventHub",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.KeyVault",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ServiceBus",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": ["westeurope", "northeurope"]
                },
                {
                  "service": "Microsoft.Web",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ContainerRegistry",
                  "locations": ["*"]
                }
              ]
            }
          },
          {
            "name": "[parameters('subnetvNetCloudResources')]",
            "properties": {
              "addressPrefix": "[parameters('subnetvNetCloudResourcesAddressPrefix')]",
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ],
              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureActiveDirectory",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.EventHub",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.KeyVault",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ServiceBus",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": ["westeurope", "northeurope"]
                },
                {
                  "service": "Microsoft.Web",
                  "locations": ["*"]
                },
                {
                  "service": "Microsoft.ContainerRegistry",
                  "locations": ["*"]
                }
              ]
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2020-05-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('vNetCloudtovNetOnPremisePeeringName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vNetOnPremise'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vNetCloud'))]"
          ],
          "comments": "This is the peering from vNet 2 to vNet 1",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": false,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vNetOnPremise'))]"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetCloud'))]"
      ],
      "name": "[variables('storageAccountCloudName')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetCloud'), parameters('subnetvNetCloudResources'))]",
              "action": "Allow"
            }
          ],
          "ipRules": [],
          "defaultAction": "Deny"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetOnPremise'))]"
      ],
      "name": "[variables('storageAccountOnPremiseName')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetOnPremise'), parameters('subnetvNetOnPremise'))]",
              "action": "Allow"
            }
          ],
          "ipRules": [],
          "defaultAction": "Deny"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2018-05-01-preview",
      "location": "[parameters('appInsightsLocation')]",
      "name": "[variables('applicationInsightsName')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('applicationInsightsName')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "name": "[variables('hostingPlanCloudName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "EP1",
        "tier": "ElasticPremium"
      },
      "kind": "elastic",
      "properties": {
        "maximumElasticWorkerCount": 20
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "name": "[variables('hostingPlanOnPremiseName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "EP1",
        "tier": "ElasticPremium"
      },
      "kind": "elastic",
      "properties": {
        "maximumElasticWorkerCount": 20
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[parameters('functionCloudAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanCloudName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCloudName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetCloud'))]"
      ],
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanCloudName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(variables('appInsightsResourceId'), '2018-05-01-preview').instrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[concat('InstrumentationKey=', reference(variables('appInsightsResourceId'), '2018-05-01-preview').instrumentationKey)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountCloudName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCloudName')), '2019-06-01').keys[0].value,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionWorkerRuntime')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~12"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "networkConfig",
          "apiVersion": "2019-08-01",
          "name": "virtualNetwork",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', parameters('functionCloudAppName'))]"
          ],
          "properties": {
            "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetCloud'), parameters('subnetvNetCloudResources'))]",
            "isSwift": true
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(parameters('functionCloudAppName'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionCloudAppName'))]"
      ],
      "properties": {
        "ipSecurityRestrictions": [
          {
            "vnetSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetCloud'), parameters('subnetvNetCloudAPIM'))]",
            "action": "Allow",
            "tag": "Default",
            "priority": 300,
            "name": "AllowSubnetCloudAPIM"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[parameters('functionOnPremiseAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanOnPremiseName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountOnPremiseName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetOnPremise'))]"
      ],
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanOnPremiseName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(variables('appInsightsResourceId'), '2018-05-01-preview').instrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[concat('InstrumentationKey=', reference(variables('appInsightsResourceId'), '2018-05-01-preview').instrumentationKey)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountOnPremiseName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountOnPremiseName')), '2019-06-01').keys[0].value,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionWorkerRuntime')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~12"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "networkConfig",
          "apiVersion": "2019-08-01",
          "name": "virtualNetwork",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', parameters('functionOnPremiseAppName'))]"
          ],
          "properties": {
            "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetOnPremise'), parameters('subnetvNetOnPremise'))]",
            "isSwift": true
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(parameters('functionOnPremiseAppName'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionOnPremiseAppName'))]"
      ],
      "properties": {
        "ipSecurityRestrictions": [
          {
            "vnetSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetCloud'), parameters('subnetvNetCloudAPIM'))]",
            "action": "Allow",
            "tag": "Default",
            "priority": 300,
            "name": "AllowSubnetCloudAPIM"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false
      }
    },
    {
      "apiVersion": "2019-12-01",
      "name": "[variables('apiManagementServiceName')]",
      "type": "Microsoft.ApiManagement/service",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetCloud'))]"
      ],
      "sku": {
        "name": "[parameters('sku')]",
        "capacity": "[parameters('skuCount')]"
      },
      "properties": {
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]",
        "virtualNetworkType": "Internal",
        "virtualNetworkConfiguration": {
          "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetCloud'), parameters('subnetvNetCloudAPIM'))]"
        }
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2020-06-01-preview",
      "name": "[concat(variables('apiManagementServiceName'), '/cloud-function')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "displayName": "cloud-function",
        "value": "[concat('https://', parameters('functionCloudAppName'), '.azurewebsites.net/api')]",
        "tags": [],
        "secret": false
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2020-06-01-preview",
      "name": "[concat(variables('apiManagementServiceName'), '/on-premise-function')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "displayName": "on-premise-function",
        "value": "[concat('https://', parameters('functionOnPremiseAppName'), '.azurewebsites.net/api')]",
        "tags": [],
        "secret": false
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2020-06-01-preview",
      "name": "[concat(variables('apiManagementServiceName'), '/evaluation')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "displayName": "Evaluation",
        "apiRevision": "1",
        "subscriptionRequired": false,
        "path": "evaluation",
        "protocols": ["https"],
        "isCurrent": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2020-06-01-preview",
      "name": "[concat(variables('apiManagementServiceName'), '/evaluation/cloud')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('apiManagementServiceName'), 'evaluation')]",
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "displayName": "cloud",
        "method": "GET",
        "urlTemplate": "/cloud",
        "templateParameters": [],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2020-06-01-preview",
      "name": "[concat(variables('apiManagementServiceName'), '/evaluation/onpremise')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('apiManagementServiceName'), 'evaluation')]",
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "displayName": "onpremise",
        "method": "GET",
        "urlTemplate": "/onpremise",
        "templateParameters": [],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2020-06-01-preview",
      "name": "[concat(variables('apiManagementServiceName'), '/evaluation/cloud/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apiManagementServiceName'), 'evaluation', 'cloud')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('apiManagementServiceName'), 'evaluation')]",
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service base-url=\"{{cloud-function}}\" />\r\n    <rewrite-uri template=\"/CloudTrigger\" copy-unmatched-params=\"true\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2020-06-01-preview",
      "name": "[concat(variables('apiManagementServiceName'), '/evaluation/onpremise/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apiManagementServiceName'), 'evaluation', 'onpremise')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('apiManagementServiceName'), 'evaluation')]",
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service base-url=\"{{on-premise-function}}\" />\r\n    <rewrite-uri template=\"/OnPremiseTrigger\" copy-unmatched-params=\"true\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    }
  ]
}
